<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Game

rnd = 1;

player = instance_create(200, room_height div 2, obj_player);
enemy = instance_create(room_width - 200, room_height div 2, obj_player);

player.player = 1;
enemy.enemy = 1;
texture_set_interpolation(false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game

//Initialization

var q = keyboard_check_pressed(ord('Q'));
var w = keyboard_check_pressed(ord('W'));
var e = keyboard_check_pressed(ord('E'));
var n = keyboard_check_pressed(ord('N'));

//Listen to keypress
if(q or w or e and player.state_idle) {
    player.state_idle = 0;
    player.state_waiting = 0;
    player.state_completed = 0;
    player.state_moving = 1;       
    
    //If PLAYER attacking
    
    var enemy_command = irandom(2);
    // 0 = atk
    // 1 = def
    // 2 = hatk
    
    enemy.state_idle = 0;
    enemy.state_waiting = 0;
    enemy.state_completed = 0;
    enemy.state_moving = 1;       
    
    
    if(q){
        
        switch (enemy_command){
        //Enemy ATK
        case 0:
        
        player.state_atk = 1;
        enemy.hp -= player.atk + irandom(10);
        
        enemy.state_atk = 1;
        player.hp -= enemy.atk + irandom(10);
        break;
        
        //Enemy DEF
        case 1:
        
        player.state_atk = 1;
        enemy.hp -= (
        (player.atk + irandom(10)) -
        (enemy.def)
         ) ;
        
        enemy.state_def = 1;
        break;
        
        //Enemy HATK
        case 2:
        player.state_atk = 1;
        enemy.hp -= player.atk + irandom(10);
        
        enemy.state_hatk = 1;
        player.hp -= enemy.hatk + irandom(15);
        break;
        
        
        }
        
    
    }
    //If PLAYER defending
    if (w){
        switch(enemy_command){
        //Enemy ATK
        case 0:
        player.state_def = 1;
        enemy.state_atk = 1;
        
        player.hp -= ((enemy.atk + irandom(10)) - (player.def));
        
        break;
        
        //Enemy DEF
        case 1:
        player.state_def = 1;
        enemy.state_def = 1;
        
        break;
        
        //Enemy HATK
        case 2:
        player.state_def = 1;
        enemy.state_hatk = 1;
        
        enemy.hp -= (enemy.hatk + irandom(15));
        break;
        
        
        }
        
    
    
    }
    //If PLAYER heavy attack
    if (e) {
    
     switch(enemy_command){
        //Enemy ATK
        case 0:
        player.state_hatk = 1;
        enemy.state_atk = 1;
        
        enemy.hp -= (player.hatk + irandom(15));
        player.hp -= (enemy.atk + irandom(10));
        
        break;
        
        //Enemy DEF
        case 1:
        player.state_hatk = 1;
        enemy.state_def = 1;
        
        player.hp -= (player.hatk + irandom(15));
        
        break;
        
        //Enemy HATK
        case 2:
        player.state_hatk = 1;
        enemy.state_hatk = 1;
        
        enemy.hp -= (player.hatk + irandom(15));
        player.hp -= (enemy.hatk + irandom(15));
        break;
        
        
        }
 
    }
        rnd++;
}


if(n){
    game_restart();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_set_font(fnt_basic);
draw_set_colour(c_white);
draw_text(150, 64, "HP: " + string(player.hp));
draw_text(800, 64, "HP: " + string(enemy.hp));

draw_text(150, 640, "Attack: Q / Defend: W / Heavy Attack: E ");

draw_set_font(fnt_large);
draw_text(420, 160, "Round " + string(rnd));


if( player.hp &lt;= 0 and enemy.hp &lt;= 0) {
    draw_set_font(fnt_basic);
   draw_text(470, 200, "Noobs...");

   draw_text(230, 600, "Press N for a new game"); }
else if(player.hp &lt;= 0){
   draw_set_font(fnt_basic);
   draw_text(355, 200, "Game over. U Got Rekt son...");

   draw_text(230, 600, "Press N for a new game");
  
}
else if(enemy.hp &lt;= 0){
   draw_set_font(fnt_basic);
   draw_text(315, 200, "Congratulations, you won! stupid AI...");
   
   draw_text(230, 600, "Press N for a new game");
}
else{
    if(player.state_idle and enemy.state_idle) {
    draw_text(340, 200, "Choose action...");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
