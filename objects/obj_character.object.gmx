<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Parent object initialization

randomize();
hp = 120;
player = 0;
enemy = 0;

atk =5;
def = 3;
hatk =  15;

movespeed = 3;


state_atk = 0;
state_def = 0;
state_hatk = 0;

state_idle = 1;
state_waiting = 0;
state_completed = 0;
state_moving = 0;
state_moving_back = 0;

if(x &lt; room_width div 2){
    image_xscale = -6;
    image_yscale = 6;
    left = 1;
    right = 0;

}
else{
    image_xscale = 6;
    image_yscale = 6;
    left = 0;
    right = 1;

    
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//State checks
//Check if idle state
if(state_idle){
    sprite_index = spr_impknight_idle;
    image_speed = random(0.2);
}

//Check if moving
if(state_moving) {

    if(left){
            if !(distance_to_point((room_width div 2) - 80, room_height div 2) &lt;=1)
            {
                    hspeed += movespeed;
            }
            else {
                 state_waiting = 1; 
               
            }
    }
    
    if(right){
             if !(distance_to_point((room_width div 2) + 80, room_height div 2) &lt;=1 )
            {
                    hspeed -= movespeed;
            }
            else {
                 state_waiting = 1; 
               
            }
    }
    

    
}

//Check if waiting (ready to perform action)
if (state_waiting) {
     speed = 0;

}
//Check if action is done
if (state_completed) {
   /* sprite_index = spr_impknight_idle;
    image_speed = 0.2;
    if (image_index &gt;= 3){ */
                state_idle = 0;
                state_waiting = 0;
                state_completed = 0;
                state_moving = 0;
                state_moving_back = 1;     
                
                state_atk = 0;
   //   } 
 
     
}
//Moving back
if(state_moving_back){

    if(left){
            if !(distance_to_point( xstart, ystart) &lt;=0)
            {
                    hspeed -= movespeed;
            }
            else {
                state_idle = 1;
                state_waiting = 1;
                state_completed = 0;
                state_moving = 0;
                state_moving_back = 0;     
                
                state_atk = 0;
             
                
            }
    }
    
    if(right){
             if !(distance_to_point(xstart, ystart) &lt;=0 )
            {
                    hspeed += movespeed;
            }
            else {
                state_idle = 1;
                state_waiting = 1;
                state_completed = 0;
                state_moving = 0;
                state_moving_back = 0;     
                
                state_atk = 0;
               
            }
        }

}

//Check if attacking
if(state_atk){
   if speed &lt;= 0{
            sprite_index = spr_impknight_atk;
            image_speed = 0.03;
       
            if (image_index &gt;= 3){
                state_atk = 0;
                state_idle = 0;
                state_waiting = 0;
                state_completed = 1;
                state_moving = 0;     
              audio_play_sound(snd_atk,0,0);
             } 
     }
        
}

//Check if hatk
if(state_hatk){
   if speed &lt;= 0{
            sprite_index = spr_impknight_hatk;
            image_speed = 0.03;
       
            if (image_index &gt;= 3){
                state_hatk = 0;
                state_idle = 0;
                state_waiting = 0;
                state_completed = 1;
                state_moving = 0;     
                audio_play_sound(snd_hatk,1,0);
             } 
     }
        
}

//Check if def
if(state_def){
   if speed &lt;= 0{
            sprite_index = spr_impknight_def;
            image_speed = 0.03;
       
            if (image_index &gt;= 3){
                state_def = 0;
                state_idle = 0;
                state_waiting = 0;
                state_completed = 1;
                state_moving = 0;     
                audio_play_sound(snd_def,5,0);

             } 
     }
        
}

if(hp &lt;= 0) {

    hp = 0;
    sprite_index = spr_impknight_hurt;
    image_speed = 0.3;
}


    

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
